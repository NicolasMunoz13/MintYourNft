{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","REACT_APP_PINATA_API_KEY","REACT_APP_PINATA_API_SECRET","App","_useState","useState","_useState2","Object","slicedToArray","currentAccount","setCurrentAccount","checkIfWalletIsConnected","_ref","asyncToGenerator","_regeneratorRuntime","mark","_callee","_window","ethereum","accounts","account","wrap","_context","prev","next","window","console","log","abrupt","request","method","sent","length","stop","apply","this","arguments","connectWallet","_ref2","_callee2","_window2","_context2","alert","t0","askContractToMintNft","_ref3","_callee3","_window3","provider","signer","connectedContract","nftTxn","_context3","ethers","providers","Web3Provider","getSigner","Contract","myNft","abi","makeAnEpicNFT","wait","concat","hash","useEffect","_useState3","_useState4","fileImg","setFileImg","sendFileToIPFS","_ref4","_callee4","e","formData","resFile","ImgHash","name","description","attributeType","attributeInfo","data","resData","config","res","_context4","preventDefault","FormData","append","axios","url","headers","pinata_api_key","pinata_secret_api_key","Content-Type","IpfsHash","document","getElementById","value","JSON","stringify","pinataOptions","cidVersion","pinataMetadata","keyvalues","customKey","customKey2","pinataContent","image","attributes","trait-type","_x","react_default","a","createElement","className","src","logo","alt","onSubmit","class","id","type","onChange","target","files","placeholder","onClick","reportWebVitals","onPerfEntry","Function","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,k+yECOxC,IAAMC,EAA2B,uBAC3BC,EAA8B,mEAmOrBC,MAjOf,WAAc,IAAAC,EAEgCC,mBAAS,IAFzCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAELK,EAFKH,EAAA,GAEWI,EAFXJ,EAAA,GAINK,EAAwB,eAAAC,EAAAL,OAAAM,EAAA,EAAAN,CAAAO,IAAAC,KAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAN,IAAAO,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UAAAP,EACVQ,OAAbP,EADuBD,EACvBC,SADuB,CAAAI,EAAAE,KAAA,eAI7BE,QAAQC,IAAI,gCAJiBL,EAAAM,OAAA,iBAO7BF,QAAQC,IAAI,8BAA+BT,GAPd,cAAAI,EAAAE,KAAA,EAURN,EAASW,QAAQ,CAAEC,OAAQ,iBAVnB,OAYP,KAFlBX,EAVyBG,EAAAS,MAYlBC,QACLZ,EAAUD,EAAS,GACzBO,QAAQC,IAAI,+BAAgCP,GAC5CV,EAAkBU,IAElBM,QAAQC,IAAI,+BAjBiB,yBAAAL,EAAAW,SAAAjB,MAAH,yBAAAJ,EAAAsB,MAAAC,KAAAC,YAAA,GAwBxBC,EAAa,eAAAC,EAAA/B,OAAAM,EAAA,EAAAN,CAAAO,IAAAC,KAAG,SAAAwB,IAAA,IAAAC,EAAAtB,EAAAC,EAAA,OAAAL,IAAAO,KAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,UAAAiB,EAAAlB,KAAA,EAAAiB,EAEGf,OAAbP,EAFUsB,EAEVtB,SAFU,CAAAuB,EAAAjB,KAAA,eAKhBkB,MAAM,iBALUD,EAAAb,OAAA,wBAAAa,EAAAjB,KAAA,EAYKN,EAASW,QAAQ,CAAEC,OAAQ,wBAZhC,OAYZX,EAZYsB,EAAAV,KAiBlBL,QAAQC,IAAI,YAAaR,EAAS,IAClCT,EAAkBS,EAAS,IAlBTsB,EAAAjB,KAAA,iBAAAiB,EAAAlB,KAAA,GAAAkB,EAAAE,GAAAF,EAAA,SAoBlBf,QAAQC,IAARc,EAAAE,IApBkB,yBAAAF,EAAAR,SAAAM,EAAA,kBAAH,yBAAAD,EAAAJ,MAAAC,KAAAC,YAAA,GAwBbQ,EAAoB,eAAAC,EAAAtC,OAAAM,EAAA,EAAAN,CAAAO,IAAAC,KAAG,SAAA+B,IAAA,IAAAC,EAAA7B,EAAA8B,EAAAC,EAAAC,EAAAC,EAAA,OAAArC,IAAAO,KAAA,SAAA+B,GAAA,cAAAA,EAAA7B,KAAA6B,EAAA5B,MAAA,UAAA4B,EAAA7B,KAAA,EAAAwB,EAINtB,SAAbP,EAJmB6B,EAInB7B,UAJmB,CAAAkC,EAAA5B,KAAA,gBAOnBwB,EAAW,IAAIK,IAAOC,UAAUC,aAAarC,GAC7C+B,EAASD,EAASQ,YAClBN,EAAoB,IAAIG,IAAOI,SARhB,6CAQ2CC,EAAMC,IAAKV,GAE3EvB,QAAQC,IAAI,yCAXayB,EAAA5B,KAAA,GAYN0B,EAAkBU,gBAZZ,eAYrBT,EAZqBC,EAAArB,KAczBL,QAAQC,IAAI,yBAdayB,EAAA5B,KAAA,GAenB2B,EAAOU,OAfY,QAiBzBnC,QAAQC,IAAR,2DAAAmC,OAAuEX,EAAOY,OAjBrDX,EAAA5B,KAAA,iBAoBzBE,QAAQC,IAAI,kCApBa,QAAAyB,EAAA5B,KAAA,iBAAA4B,EAAA7B,KAAA,GAAA6B,EAAAT,GAAAS,EAAA,SAuB3B1B,QAAQC,IAARyB,EAAAT,IAvB2B,yBAAAS,EAAAnB,SAAAa,EAAA,kBAAH,yBAAAD,EAAAX,MAAAC,KAAAC,YAAA,GAkC1B4B,oBAAU,WACRrD,KACC,IAxFS,IAAAsD,EA0FkB5D,mBAAS,MA1F3B6D,EAAA3D,OAAAC,EAAA,EAAAD,CAAA0D,EAAA,GA0FLE,EA1FKD,EAAA,GA0FIE,EA1FJF,EAAA,GA4FNG,EAAc,eAAAC,EAAA/D,OAAAM,EAAA,EAAAN,CAAAO,IAAAC,KAAG,SAAAwD,EAAOC,GAAP,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAArE,IAAAO,KAAA,SAAA+D,GAAA,cAAAA,EAAA7D,KAAA6D,EAAA5D,MAAA,WACjB2C,EADiB,CAAAiB,EAAA5D,KAAA,gBAAA4D,EAAA7D,KAAA,EAGjBiD,EAAEa,kBACIZ,EAAW,IAAIa,UACZC,OAAO,OAAQpB,GALPiB,EAAA5D,KAAA,EAMKgE,IAAM,CAC1B1D,OAAQ,OACR2D,IAAK,iDACLT,KAAMP,EACNiB,QAAS,CACPC,eAAkB1F,EAClB2F,sBAAyB1F,EACzB2F,eAAgB,yBAbH,cAMXnB,EANWU,EAAArD,KAiBX4C,EAjBW,qCAAAb,OAiBoCY,EAAQM,KAAKc,UAClEpE,QAAQC,IAAIgD,GACRC,EAAOmB,SAASC,eAAe,QAAQC,MACvCpB,EAAckB,SAASC,eAAe,eAAeC,MACrDnB,EAAgBiB,SAASC,eAAe,iBAAiBC,MACzDlB,EAAgBgB,SAASC,eAAe,iBAAiBC,MAGzDjB,EAAOkB,KAAKC,UAAU,CACxBC,cAAiB,CACfC,WAAc,GAEhBC,eAAkB,CAChB1B,KAAQ,WACR2B,UAAa,CACXC,UAAa,cACbC,WAAc,iBAGlBC,cAAiB,CACf9B,KAAQA,EACRC,YAAeA,EACf8B,MAAShC,EACTiC,WAAc,CACZ,CACEC,aAAc/B,EACdmB,MAASlB,OAMjBrD,QAAQC,IAAIqD,GAjDKI,EAAA5D,KAAA,GAmDKgE,IAAM,CAC1B1D,OAAQ,OACR2D,IAAK,iDACLT,KAAMA,EACNU,QAAS,CACPC,eAAkB1F,EAClB2F,sBAAyB1F,EACzB2F,eAAgB,sBA1DH,eAmDXZ,EAnDWG,EAAArD,KA8DjBL,QAAQC,IAAIsD,GAERC,EAAS,CACXpD,OAAQ,OACR2D,IAAK,iDACLC,QAAS,CACPG,eAAgB,mBAChBF,eAAkB1F,EAClB2F,sBAAyB1F,GAE3B8E,KAAMA,GAGRe,SAASC,eAAe,QAAQC,MAAQ,GACxCF,SAASC,eAAe,eAAeC,MAAQ,GAC/CF,SAASC,eAAe,iBAAiBC,MAAQ,GACjDF,SAASC,eAAe,iBAAiBC,MAAQ,GACjDF,SAASC,eAAe,cAAcC,MAAQ,GA/E7Bb,EAAA5D,KAAA,GAiFCgE,IAAMN,GAjFP,eAiFXC,EAjFWC,EAAArD,KAmFjBL,QAAQC,IAAIwD,EAAIH,MAnFCI,EAAAxD,OAAA,SAsFV+C,GAtFU,QAAAS,EAAA7D,KAAA,GAAA6D,EAAAzC,GAAAyC,EAAA,SAyFjB1D,QAAQC,IAAI,gCACZD,QAAQC,IAARyD,EAAAzC,IA1FiB,yBAAAyC,EAAAnD,SAAAsC,EAAA,kBAAH,gBAAAuC,GAAA,OAAAxC,EAAApC,MAAAC,KAAAC,YAAA,GA+FpB,OACE2E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SAEzCN,EAAAC,EAAAC,cAAA,QAAMK,SAAUjD,GACd0C,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,OAAKM,MAAM,cACTR,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,SAAOO,GAAG,UAEZT,EAAAC,EAAAC,cAAA,OAAKM,MAAM,cACTR,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,SAAOO,GAAG,iBAEZT,EAAAC,EAAAC,cAAA,OAAKM,MAAM,cACTR,EAAAC,EAAAC,cAAA,MAAIM,MAAM,cAAV,UACAR,EAAAC,EAAAC,cAAA,SAAOO,GAAG,aAAaC,KAAK,OAAOC,SAAU,SAAClD,GAAD,OAAOJ,EAAWI,EAAEmD,OAAOC,MAAM,QAEhFb,EAAAC,EAAAC,cAAA,OAAKM,MAAM,cACTR,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,SAAOY,YAAY,OAAOL,GAAG,kBAC7BT,EAAAC,EAAAC,cAAA,SAAOY,YAAY,cAAcL,GAAG,oBAGpB,KAAnB/G,EApIPsG,EAAAC,EAAAC,cAAA,UAAQa,QAASzF,EAAe6E,UAAU,oCAA1C,qBAuIQH,EAAAC,EAAAC,cAAA,UAAQQ,KAAK,SAASK,QAASlF,EAAsBsE,UAAU,oCAA/D,qBCtNGa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxClI,EAAAyE,EAAA,GAAA0D,KAAAnI,EAAAoI,KAAA,UAAqBD,KAAK,SAAAtH,GAAiD,IAA9CwH,EAA8CxH,EAA9CwH,OAAQC,EAAsCzH,EAAtCyH,OAAQC,EAA8B1H,EAA9B0H,OAAQC,EAAsB3H,EAAtB2H,OAAQC,EAAc5H,EAAd4H,QAC3DJ,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,MCDDS,IAASC,WAAW3C,SAASC,eAAe,SACpD2C,OACH5B,EAAAC,EAAAC,cAACF,EAAAC,EAAM4B,WAAP,KACE7B,EAAAC,EAAAC,cAAC4B,EAAD,QAOJd","file":"static/js/main.cf9c5a1e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import React, { useState, useEffect } from 'react';\nimport { ethers } from \"ethers\";\nimport axios from 'axios'\nimport logo from './logo.svg';\nimport './App.css';\nimport myNft from './utils/MyEpicNFT.json'\n\nconst REACT_APP_PINATA_API_KEY = \"aed0750e7ed29375bf33\";\nconst REACT_APP_PINATA_API_SECRET = \"51eae4a0095196e59f38c2cffc74977d78f11493eba88a30e6e67fe99e9b3ee6\";\n\nfunction App(){\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  \n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  }\n\n  /*\n  * Implement your connectWallet method here\n  */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      /*\n      * Fancy method to request access to account.\n      */\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      /*\n      * Boom! This should print out public address once we authorize Metamask.\n      */\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); \n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const askContractToMintNft = async () => {\n  const CONTRACT_ADDRESS = \"0x75E48263A7279e285D7f05E0B20A265ad4Ccc3fA\";\n\n  try {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myNft.abi, signer);\n\n      console.log(\"Going to pop wallet now to pay gas...\")\n      let nftTxn = await connectedContract.makeAnEpicNFT();\n\n      console.log(\"Mining...please wait.\")\n      await nftTxn.wait();\n      \n      console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n\n    } else {\n      console.log(\"Ethereum object doesn't exist!\");\n    }\n  } catch (error) {\n    console.log(error)\n  }\n}\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n  const [fileImg, setFileImg] = useState(null);\n\n  const sendFileToIPFS = async (e) => {\n    if (fileImg) {\n      try {\n        e.preventDefault();\n        const formData = new FormData();\n        formData.append(\"file\", fileImg);\n        const resFile = await axios({\n          method: \"post\",\n          url: \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\n          data: formData,\n          headers: {\n            'pinata_api_key': REACT_APP_PINATA_API_KEY,\n            'pinata_secret_api_key': REACT_APP_PINATA_API_SECRET,\n            \"Content-Type\": \"multipart/form-data\"\n          },\n        });\n\n        const ImgHash = `https://gateway.pinata.cloud/ipfs/${resFile.data.IpfsHash}`;\n        console.log(ImgHash);\n        let name = document.getElementById(\"name\").value;\n        let description = document.getElementById(\"description\").value;\n        let attributeType = document.getElementById(\"attributeType\").value;\n        let attributeInfo = document.getElementById(\"attributeInfo\").value;\n\n\n        let data = JSON.stringify({\n          \"pinataOptions\": {\n            \"cidVersion\": 1\n          },\n          \"pinataMetadata\": {\n            \"name\": \"testJson\",\n            \"keyvalues\": {\n              \"customKey\": \"customValue\",\n              \"customKey2\": \"customValue2\"\n            }\n          },\n          \"pinataContent\": {\n            \"name\": name,\n            \"description\": description,\n            \"image\": ImgHash,\n            \"attributes\": [\n              {\n                \"trait-type\": attributeType,\n                \"value\": attributeInfo\n              }\n            ]\n          }\n        });\n\n        console.log(data);\n\n        const resData = await axios({\n          method: \"post\",\n          url: \"https://api.pinata.cloud/pinning/pinJSONToIPFS\",\n          data: data,\n          headers: {\n            'pinata_api_key': REACT_APP_PINATA_API_KEY,\n            'pinata_secret_api_key': REACT_APP_PINATA_API_SECRET,\n            'Content-Type': 'application/json',\n          },\n        })\n\n        console.log(resData);\n\n        let config = {\n          method: 'post',\n          url: 'https://api.pinata.cloud/pinning/pinJSONToIPFS',\n          headers: {\n            'Content-Type': 'application/json',\n            'pinata_api_key': REACT_APP_PINATA_API_KEY,\n            'pinata_secret_api_key': REACT_APP_PINATA_API_SECRET,\n          },\n          data: data\n        };\n\n        document.getElementById(\"name\").value = \"\";\n        document.getElementById(\"description\").value = \"\";\n        document.getElementById(\"attributeType\").value = \"\";\n        document.getElementById(\"attributeInfo\").value = \"\";\n        document.getElementById(\"input_file\").value = \"\";\n\n        const res = await axios(config);\n\n        console.log(res.data);\n\n        //Take a look at your Pinata Pinned section, you will see a new file added to you list.   \n        return ImgHash;\n\n      } catch (error) {\n        console.log(\"Error sending File to IPFS: \")\n        console.log(error)\n      }\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Input NFT information</h1>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n        <form onSubmit={sendFileToIPFS}>\n          <section>\n            <div class=\"field_flex\">\n              <h2>Nombre</h2>\n              <input id=\"name\" />\n            </div>\n            <div class=\"field_flex\" >\n              <h2>Descripcion</h2>\n              <input id=\"description\" />\n            </div>\n            <div class=\"field_flex\">\n              <h2 class=\"img__field\">Imagen</h2>\n              <input id='input_file' type=\"file\" onChange={(e) => setFileImg(e.target.files[0])} />\n            </div>\n            <div class=\"field_flex\" >\n              <h2>Atributos</h2>\n              <input placeholder=\"Tipo\" id=\"attributeType\" />\n              <input placeholder=\"Informacion\" id=\"attributeInfo\" />\n            </div>\n          </section>\n          {currentAccount === \"\" ? (\n            renderNotConnectedContainer()\n          ) : (\n            <button type='submit' onClick={askContractToMintNft} className=\"cta-button connect-wallet-button\">Mintea tu NFT</button>\n          )}\n        </form>\n      </header>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}